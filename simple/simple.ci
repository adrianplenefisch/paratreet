mainmodule simple {
  include "BoundingBox.h";
  include "Splitter.h";
  include "CentroidData.h";
  class CentroidVisitor;
  include "Node.h";
  include "TPHolder.h";
  class CProxy_Reader;

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly std::string input_file;
  readonly int n_readers;
  readonly double decomp_tolerance;
  readonly int max_particles_per_tp;
  readonly int max_particles_per_leaf;
  readonly int decomp_type;
  readonly int tree_type;
  readonly int num_iterations;
  readonly CProxy_TreeElement<CentroidData> centroid_calculator;
  readonly CProxy_CacheManager<CentroidData> centroid_cache;
  readonly CProxy_CountManager count_manager;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [threaded] void run();
    entry void doneUp();
    entry void catchDown();
    entry [reductiontarget] void doneDown();
    entry [reductiontarget] void terminate(CkReductionMsg*);

    // debug
    entry [reductiontarget] void checkParticlesChangedDone(bool result);
  };

  message ParticleMsg {
    Particle particles[];
  };

  template <class Data> //hi
  message MultiMsg {
    Particle particles[];
    Node<Data> nodes[];
  };
  
  message MultiMsg<CentroidData>;

  template <typename Data>
#ifdef SMPCACHE
  nodegroup CacheManager {
#else
  group CacheManager {
#endif
    entry CacheManager();
    entry void receiveTP(TPHolder<Data>);
    template <typename Visitor>
    entry void addCache(MultiMsg<Data>*);
    template <typename Visitor>
    entry void restoreData(Key, Data);
  };

#ifdef SMPCACHE
  nodegroup CacheManager<CentroidData>;
#else
  group CacheManager<CentroidData>;
#endif
  extern entry void CacheManager<CentroidData> addCache<GravityVisitor> (MultiMsg<CentroidData>*);
  extern entry void CacheManager<CentroidData> addCache<DensityVisitor> (MultiMsg<CentroidData>*);
  extern entry void CacheManager<CentroidData> addCache<PressureVisitor> (MultiMsg<CentroidData>*);
  extern entry void CacheManager<CentroidData> addCache<CountVisitor> (MultiMsg<CentroidData>*);
  extern entry void CacheManager<CentroidData> restoreData<GravityVisitor> (Key, CentroidData);
  extern entry void CacheManager<CentroidData> restoreData<DensityVisitor> (Key, CentroidData);
  extern entry void CacheManager<CentroidData> restoreData<PressureVisitor> (Key, CentroidData);
  extern entry void CacheManager<CentroidData> restoreData<CountVisitor> (Key, CentroidData);

  template <typename Data>
  array [1d] TreeElement {
    entry TreeElement();
    template <typename Visitor>
    entry [createhere] void receiveData(TPHolder<Data>, Data, int);
    template <typename Visitor>
    entry void requestData(CProxy_CacheManager<Data>, int);
    entry void print();
    entry void reset();
  };

  array [1d] TreeElement<CentroidData>;
  extern entry void TreeElement<CentroidData> receiveData<CentroidVisitor>(TPHolder<CentroidData>, CentroidData, int);
  extern entry void TreeElement<CentroidData> requestData<GravityVisitor>(CProxy_CacheManager<CentroidData>, int);
  extern entry void TreeElement<CentroidData> requestData<DensityVisitor>(CProxy_CacheManager<CentroidData>, int);
  extern entry void TreeElement<CentroidData> requestData<PressureVisitor>(CProxy_CacheManager<CentroidData>, int);
  extern entry void TreeElement<CentroidData> requestData<CountVisitor>(CProxy_CacheManager<CentroidData>, int);

  template <typename Data>
  array [1d] TreePiece {
    entry TreePiece(const CkCallback&, int, int);
    entry void receive(ParticleMsg*);
    entry void check(const CkCallback&);
    entry void build(const CkCallback&);
    entry void triggerRequest();
    template<typename Visitor>
    entry void upOnly(CProxy_TreeElement<Data>);
    template<typename Visitor>
    entry void startDown(CProxy_CacheManager<Data>);
    template<typename Visitor>
    entry void startUpAndDown(CProxy_CacheManager<Data>);
    template<typename Visitor>
    entry void goDown(Key);
    template<typename Visitor>
    entry void catchMissed();
    template<typename Visitor>
    entry void requestNodes(Key, CProxy_CacheManager<Data>, int);
    entry void perturb(Real timestep);
    entry void flush(CProxy_Reader);
    entry void rebuild(const CkCallback&);

    entry void checkParticlesChanged(const CkCallback&);
  };

  array [1d] TreePiece<CentroidData>;
  extern entry void TreePiece<CentroidData> upOnly<CentroidVisitor> (CProxy_TreeElement<CentroidData>);

  extern entry void TreePiece<CentroidData> startDown<GravityVisitor> (CProxy_CacheManager<CentroidData>);
  extern entry void TreePiece<CentroidData> requestNodes<GravityVisitor> (Key, CProxy_CacheManager<CentroidData>, int);
  extern entry void TreePiece<CentroidData> goDown<GravityVisitor> (Key);
  extern entry void TreePiece<CentroidData> catchMissed<GravityVisitor> ();

  extern entry void TreePiece<CentroidData> startUpAndDown<DensityVisitor> (CProxy_CacheManager<CentroidData>);
  extern entry void TreePiece<CentroidData> requestNodes<DensityVisitor> (Key, CProxy_CacheManager<CentroidData>, int);
  extern entry void TreePiece<CentroidData> goDown<DensityVisitor> (Key);
  extern entry void TreePiece<CentroidData> catchMissed<DensityVisitor> ();

  extern entry void TreePiece<CentroidData> startDown<PressureVisitor> (CProxy_CacheManager<CentroidData>);
  extern entry void TreePiece<CentroidData> requestNodes<PressureVisitor> (Key, CProxy_CacheManager<CentroidData>, int);
  extern entry void TreePiece<CentroidData> goDown<PressureVisitor> (Key);
  extern entry void TreePiece<CentroidData> catchMissed<PressureVisitor> ();

  extern entry void TreePiece<CentroidData> startDown<CountVisitor> (CProxy_CacheManager<CentroidData>);
  extern entry void TreePiece<CentroidData> requestNodes<CountVisitor> (Key, CProxy_CacheManager<CentroidData>, int);
  extern entry void TreePiece<CentroidData> goDown<CountVisitor> (Key);
  extern entry void TreePiece<CentroidData> catchMissed<CountVisitor> ();

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void computeUniverseBoundingBox(const CkCallback&);    
    entry void assignKeys(BoundingBox, const CkCallback&);
    template <typename Data>
    entry void request(CProxy_TreePiece<Data>, int, int);
    entry void countOct(std::vector<Key>, const CkCallback&);
    //entry void countSfc(const std::vector<Key>&, const CkCallback&);
    entry void pickSamples(const int, const CkCallback&);
    entry void prepMessages(const std::vector<Key>&, const CkCallback&);
    entry void redistribute();
    entry void receive(ParticleMsg*);
    entry void localSort(const CkCallback&);
    entry void checkSort(const Key, const CkCallback&);
    entry void setSplitters(const std::vector<Splitter>&, const CkCallback&);
    template <typename Data>
    entry void flush(int, int, CProxy_TreePiece<Data>);
  };

  extern entry void Reader request<CentroidData>(CProxy_TreePiece<CentroidData>, int, int);
  extern entry void Reader flush<CentroidData>(int, int, CProxy_TreePiece<CentroidData>);

  group CountManager {
    entry CountManager(double min, double max, int nbins);
    entry void sum(const CkCallback&);
  }
};
