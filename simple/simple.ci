mainmodule simple {
  include "BoundingBox.h";

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly CProxy_TreePiece treepieces;
  readonly std::string input_file;
  readonly int n_readers;
  readonly int n_chares;
  readonly double decomp_tolerance;
  readonly int max_ppc;
  readonly int max_ppl;
  readonly int decomp_type;
  readonly int tree_type;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void terminate();
  };

  chare Decomposer {
    entry Decomposer();
    entry [threaded] void run();
  };

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void assignKeys(BoundingBox&, const CkCallback&);
    entry void count(std::vector<Key>&, const CkCallback&);
    entry void setTPKeysAndSplitters(const std::vector<Key>&, const std::vector<Key>&, const CkCallback&);
    entry void setSplitters(const std::vector<Key>&, const CkCallback&);
    entry void setSplitters(const std::vector<Key>&, const std::vector<int>&, const CkCallback&);
    entry void flush();
  };

  message ParticleMsg {
    Particle particles[];
  };

  array [1d] TreePiece {
    entry TreePiece();
    entry void initialize(const CkCallback&);
    entry [createhome] void create();
    entry void receive(ParticleMsg*);
    entry void check(const CkCallback&);
    entry void build(const CkCallback&);
  };
};
