mainmodule simple {
  include "BoundingBox.h";
  include "Splitter.h";
  include "CentroidData.h";
  include "Node.h";
  include "TPHolder.h";
  class CProxy_Reader;
  include "MultiData.h";

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly std::string input_file;
  readonly int n_readers;
  readonly double decomp_tolerance;
  readonly int max_particles_per_tp;
  readonly int max_particles_per_leaf;
  readonly int decomp_type;
  readonly int tree_type;
  readonly int num_iterations;
  readonly CProxy_TreeElement<CentroidData> centroid_calculator;
  readonly CProxy_CacheManager<CentroidData> centroid_cache;
  readonly CProxy_Resumer<CentroidData> centroid_resumer;
  readonly CProxy_CountManager count_manager;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [threaded] void run();
    entry [reductiontarget] void terminate(CkReductionMsg*);

    // debug
    entry [reductiontarget] void checkParticlesChangedDone(bool result);
  };

  message ParticleMsg {
    Particle particles[];
  };

  template <class Data>
  message MultiMsg {
    Particle particles [];
    Node<Data> nodes [];
  };
  message MultiMsg<CentroidData>;

  template <typename Data>
#ifdef SMPCACHE
  nodegroup CacheManager {
#else
  group CacheManager {
#endif
    entry CacheManager();
    entry void requestNodes(std::pair<Key, int>);
    entry void addCache(MultiMsg<Data>*);
    entry void addCache(MultiData<Data>);
    entry void restoreData(std::pair<Key, Data>);
  };

#ifdef SMPCACHE
  nodegroup CacheManager<CentroidData>;
#else
  group CacheManager<CentroidData>;
#endif

  extern entry [aggregate] void CacheManager<CentroidData> restoreData(std::pair<Key, CentroidData>);
  extern entry [aggregate] void CacheManager<CentroidData> addCache(MultiData<CentroidData>);
  extern entry [aggregate] void CacheManager<CentroidData> requestNodes(std::pair<Key, int>);

  template <typename Data>
  group Resumer {
    entry Resumer();
    template <typename Visitor>
    entry [expedited] void process(Key);
  };

  group Resumer<CentroidData>;

  extern entry void Resumer<CentroidData> process<GravityVisitor> (Key);
  extern entry void Resumer<CentroidData> process<DensityVisitor> (Key);
  extern entry void Resumer<CentroidData> process<PressureVisitor> (Key);
  extern entry void Resumer<CentroidData> process<CountVisitor> (Key);

  template <typename Data>
  array [1d] TreeElement {
    entry TreeElement();
    entry [createhere] void receiveProxies (TPHolder<Data>, int, CProxy_CacheManager<Data>);
    entry void receiveData (Data);
    entry void requestData (int);
    entry void print();
    entry void reset();
  };

  array [1d] TreeElement<CentroidData>;

  template <typename Data>
  array [1d] TreePiece {
    entry TreePiece(const CkCallback&, int, int, CProxy_TreeElement<Data>, CProxy_Resumer<Data>, CProxy_CacheManager<Data>);
    entry void receive(ParticleMsg*);
    entry void check(const CkCallback&);
    entry void build(CkCallback&);
    entry void triggerRequest();
    template<typename Visitor>
    entry void startDown(CkCallback&);
    template<typename Visitor>
    entry void startUpAndDown(CkCallback&);
    template<typename Visitor>
    entry void goDown(Key);
    entry void requestNodes(Key, int);
    entry void perturb(Real timestep);
    entry void flush(CProxy_Reader);
    entry void rebuild(const CkCallback&);

    entry void checkParticlesChanged(const CkCallback&);
  };

  array [1d] TreePiece<CentroidData>;

  extern entry void TreePiece<CentroidData> startDown<GravityVisitor> (CkCallback&);
  extern entry void TreePiece<CentroidData> startUpAndDown<DensityVisitor> (CkCallback&);
  extern entry void TreePiece<CentroidData> startDown<PressureVisitor> (CkCallback&);
  extern entry void TreePiece<CentroidData> startDown<CountVisitor> (CkCallback&);

  extern entry void TreePiece<CentroidData> goDown<GravityVisitor> (Key);
  extern entry void TreePiece<CentroidData> goDown<DensityVisitor> (Key);
  extern entry void TreePiece<CentroidData> goDown<PressureVisitor> (Key);
  extern entry void TreePiece<CentroidData> goDown<CountVisitor> (Key);

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void computeUniverseBoundingBox(const CkCallback&);    
    entry void assignKeys(BoundingBox, const CkCallback&);
    template <typename Data>
    entry void request(CProxy_TreePiece<Data>, int, int);
    entry void countOct(std::vector<Key>, const CkCallback&);
    //entry void countSfc(const std::vector<Key>&, const CkCallback&);
    entry void pickSamples(const int, const CkCallback&);
    entry void prepMessages(const std::vector<Key>&, const CkCallback&);
    entry void redistribute();
    entry void receive(ParticleMsg*);
    entry void localSort(const CkCallback&);
    entry void checkSort(const Key, const CkCallback&);
    entry void setSplitters(const std::vector<Splitter>&, const CkCallback&);
    template <typename Data>
    entry void flush(int, int, CProxy_TreePiece<Data>);
  };

  extern entry void Reader request<CentroidData>(CProxy_TreePiece<CentroidData>, int, int);
  extern entry void Reader flush<CentroidData>(int, int, CProxy_TreePiece<CentroidData>);

  group CountManager {
    entry CountManager(double min, double max, int nbins);
    entry void sum(const CkCallback&);
  }
};
