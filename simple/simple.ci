mainmodule simple {
  include "BoundingBox.h";
  include "Splitter.h";

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly std::string input_file;
  readonly int n_readers;
  readonly double decomp_tolerance;
  readonly int max_particles_per_tp;
  readonly int max_particles_per_leaf;
  readonly int decomp_type;
  readonly int tree_type;
  readonly CProxy_TraversalManager traversal_manager;
  readonly CProxy_CentroidCalculator centroid_calculator;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [threaded] void run();
    entry void doneCentroid();
    //entry [reductiontarget] void summass (float);
  };

  message ParticleMsg {
    Particle particles[];
  };

  array [1d] TreePiece {
    entry TreePiece(const CkCallback&, int, int);
    entry void receive(ParticleMsg*);
    entry void check(const CkCallback&);
    entry void build(const CkCallback&);
    entry void triggerRequest();
    entry void calculateCentroid();
  };

  array [1d] TreeElements {
    entry TreeElements();
    entry [createhere] void exist(bool); 
    //needs to be createhere for proper construction
    entry void node (Key);
    entry void leaf ();
    entry void hit ();
    entry void miss();
  };

  array [1d] CentroidCalculator : TreeElements {
    entry CentroidCalculator();
    entry [createhere] void exist(bool);
    entry void receiveCentroid(Vector3D<Real>, Real);
    entry void node (Key);
    entry void leaf ();
    //entry void printCentroid();
  };

  group TraversalManager {
    entry TraversalManager();
    entry void getNext(CProxy_TreeElements, Key, int);
  };

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void assignKeys(BoundingBox&, const CkCallback&);
    entry void request(CProxyElement_TreePiece, int);
    entry void countOct(std::vector<Key>&, const CkCallback&);
    //entry void countSfc(const std::vector<Key>&, const CkCallback&);
    entry void pickSamples(const int, const CkCallback&);
    entry void prepMessages(const std::vector<Key>&, const CkCallback&);
    entry void redistribute();
    entry void receive(ParticleMsg*);
    entry void localSort(const CkCallback&);
    entry void checkSort(const Key, const CkCallback&);
    entry void setSplitters(const std::vector<Splitter>&, const CkCallback&);
    entry void flush(int, int, CProxy_TreePiece);
  };
};
