mainmodule simple {
  include "BoundingBox.h";
  include "Splitter.h";
  include "Particle.h";

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly std::string input_file;
  readonly int n_readers;
  readonly int max_ppc;
  readonly int max_ppl;
  readonly int tree_type;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [threaded] void commence();
    entry [reductiontarget] void terminate();
  };

  chare Decomposer {
    entry Decomposer();
    entry [threaded] void run(const CkCallback&);
    entry [threaded] void flush(const CkCallback&);
  };

  nodegroup Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void assignKeys(BoundingBox&, const CkCallback&);
    entry void count(CkVec<Key>&, const CkCallback&);
    entry void setSplitters(CkVec<Splitter>&, const CkCallback&);
    entry void flush(const CkCallback&);
  };

  array [1d] TreePiece {
    entry TreePiece();
    entry void receive(int n, Particle p[n]);
  };
};
