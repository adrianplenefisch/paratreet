mainmodule simple {
  include "BoundingBox.h";
  include "Splitter.h";
  include "CentroidVisitor.h";

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly std::string input_file;
  readonly int n_readers;
  readonly double decomp_tolerance;
  readonly int max_particles_per_tp;
  readonly int max_particles_per_leaf;
  readonly int decomp_type;
  readonly int tree_type;
  //readonly CProxy_TreeElement<CentroidVisitor, CentroidData> centroid_calculator;
  readonly CProxy_TreeElement<int, bool> test;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [threaded] void run();
    entry void doneTraversal();
    //entry [reductiontarget] void summass (float);
  };

  message ParticleMsg {
    Particle particles[];
  };

  array [1d] TreePiece {
    entry TreePiece(const CkCallback&, int, int);
    entry void receive(ParticleMsg*);
    entry void check(const CkCallback&);
    entry void build(const CkCallback&);
    entry void triggerRequest();
    //template<class Data>
    //entry void calculateData(Data);
  };

  //extern entry void TreePiece calculateData();

  template<class Visitor, class Data>
  array [1d] TreeElement {
    entry TreeElement();
    entry [createhere] void TreeElement(Data, bool);
  };

  //array [1d] TreeElement<CentroidVisitor, CentroidData>;

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void assignKeys(BoundingBox&, const CkCallback&);
    entry void request(CProxyElement_TreePiece, int);
    entry void countOct(std::vector<Key>&, const CkCallback&);
    //entry void countSfc(const std::vector<Key>&, const CkCallback&);
    entry void pickSamples(const int, const CkCallback&);
    entry void prepMessages(const std::vector<Key>&, const CkCallback&);
    entry void redistribute();
    entry void receive(ParticleMsg*);
    entry void localSort(const CkCallback&);
    entry void checkSort(const Key, const CkCallback&);
    entry void setSplitters(const std::vector<Splitter>&, const CkCallback&);
    entry void flush(int, int, CProxy_TreePiece);
  };
};
