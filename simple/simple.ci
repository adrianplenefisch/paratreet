mainmodule simple {
  include "BoundingBox.h";
  include "Splitter.h";

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly std::string input_file;
  readonly int n_readers;
  readonly double decomp_tolerance;
  readonly int max_particles_per_tp;
  readonly int max_particles_per_leaf;
  readonly int decomp_type;
  readonly int tree_type;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void terminate();
  };

  chare Decomposer {
    entry Decomposer(int);
    entry [threaded] void run();
  };

  message ParticleMsg {
    Particle particles[];
  };

  /*
  array [1d] TreePiece {
    entry TreePiece(const CkCallback&, bool if_OCT_DECOMP);
    entry void receive(ParticleMsg*);
    entry void check(const CkCallback&);
    entry void build(const CkCallback&);
  };
  */

  array [1d] TreeElements {
    entry void TreeElements();
    entry [createhome] void exist(bool ifTPi);
    entry void receiveData(Vector3D<Real> momenti, Real summassi);
  };

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void assignKeys(BoundingBox&, const CkCallback&);
    entry void countOct(std::vector<Key>&, const CkCallback&);
    entry void countSfc(const std::vector<Key>&, const CkCallback&);
    entry void pickSamples(const int, const CkCallback&);
    entry void prepMessages(const std::vector<Key>&, const CkCallback&);
    entry void redistribute();
    entry void receiveMessage(ParticleMsg*);
    entry void localSort(const CkCallback& cb);
    entry void setSplitters(const std::vector<Splitter>&, const CkCallback&);
    //entry void flush(CProxy_TreePiece);
  };
};
